# —Å—Ç–æ—Ä—ñ–Ω–∫–∞_—Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.py

import os
import time
import json
import threading
import base64

import streamlit as st
import pandas as pd

from utils.training import train_model_on_files
from utils.config import PROCESSED_FOLDER, MODEL_FOLDER, TEMP_FOLDER

def training_page():
    st.title("üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ")

    # ‚îÄ‚îÄ –í–∏–±—ñ—Ä —Ñ–∞–π–ª—ñ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    csvs = [f for f in os.listdir(PROCESSED_FOLDER) if f.endswith(".csv")]
    train_csv = st.selectbox("–ù–∞–≤—á–∞–ª—å–Ω–∏–π CSV", [""] + csvs)
    val_csv   = st.selectbox("–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π CSV", [""] + csvs)
    test_csv  = st.selectbox("–¢–µ—Å—Ç–æ–≤–∏–π CSV", [""] + csvs)

    # ‚îÄ‚îÄ –†–æ–∑–∫–ª–∞–¥ —ñ –∞–ø–∞—Ä–∞—Ç–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.subheader("–†–æ–∑–∫–ª–∞–¥ —ñ –∞–ø–∞—Ä–∞—Ç–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è")
    batch_size = st.number_input("–†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É", min_value=1, value=64)
    epochs     = st.number_input("–ï–ø–æ—Ö–∏",       min_value=1, value=20)
    lr         = st.number_input("–®–≤–∏–¥–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è", format="%.5f", value=0.001)
    use_gpu    = st.checkbox("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è GPU", value=True)

    # ‚îÄ‚îÄ –ì—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    st.subheader("–ì—ñ–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—ñ")
    filters           = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –∫–æ–Ω–≤–æ–ª—é—Ü—ñ—ó",   value=64)
    kernel_size       = st.number_input("–†–æ–∑–º—ñ—Ä —è–¥—Ä–∞",                      value=5)
    pool_size         = st.number_input("–†–æ–∑–º—ñ—Ä –ø—ñ–¥–≤–∏–±—ñ—Ä–∫–∏",                value=2)
    lstm_units        = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å LSTM",           value=128)
    lstm_layers       = st.number_input("–®–∞—Ä–∏ LSTM",                       min_value=1, value=1)
    dropout_rate      = st.slider("–†—ñ–≤–µ–Ω—å –≤—ñ–¥—Å—ñ–≤—É",                       0.0, 1.0, 0.3)
    recurrent_dropout = st.slider("–†–µ–∫—É—Ä–µ–Ω—Ç–Ω–∏–π –≤—ñ–¥—Å—ñ–≤",                  0.0, 1.0, 0.1)

    model_params = {
        "filters":           filters,
        "kernel_size":       kernel_size,
        "pool_size":         pool_size,
        "lstm_units":        lstm_units,
        "lstm_layers":       lstm_layers,
        "dropout_rate":      dropout_rate,
        "recurrent_dropout": recurrent_dropout,
        "learning_rate":     lr,
    }

    # ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.button("–†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è"):
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—ñ–≤
        if not (train_csv and val_csv and test_csv):
            st.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ CSV –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è, –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.")
            return

        # –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—É
        progress_file = os.path.join(TEMP_FOLDER, "training_progress.json")
        if os.path.exists(progress_file):
            os.remove(progress_file)

        # –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞–≤—á–∞–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        args = dict(
            train_file=train_csv,
            val_file=val_csv,
            test_file=test_csv,
            processed_dir=PROCESSED_FOLDER,
            model_dir=MODEL_FOLDER,
            batch_size=batch_size,
            epochs=epochs,
            model_params=model_params,
            use_gpu=use_gpu,
            progress_file=progress_file,
        )
        threading.Thread(
            target=lambda: train_model_on_files(**args),
            daemon=True
        ).start()

        # ‚îÄ‚îÄ –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        bar    = st.progress(0)
        status = st.empty()

        while True:
            if os.path.exists(progress_file):
                try:
                    with open(progress_file) as f:
                        data = json.load(f)
                except json.JSONDecodeError:
                    time.sleep(0.5)
                    continue

                pct     = data.get("percentage", 0)
                metrics = data.get("metrics", {})

                bar.progress(pct)
                status.text(data.get("message", ""))

                # —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ test_loss
                if pct >= 100 and metrics and ("test_loss" in metrics):
                    results = metrics
                    break

            else:
                status.text("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è‚Ä¶")

            time.sleep(1)

        st.success("‚úÖ –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        _show_results(results)


def _show_results(m):
    st.subheader("–ü—ñ–¥—Å—É–º–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
    st.write(f"**–ê–ø–∞—Ä–∞—Ç–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è:** {m.get('hardware')}")
    st.write(f"**–†–æ–∑–º—ñ—Ä –ø–∞–∫–µ—Ç—É:** {m.get('batch_size')}")
    st.markdown(m.get("summary", ""), unsafe_allow_html=True)

    st.subheader("–ö—ñ–Ω—Ü–µ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    st.write(f"- –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç—ñ: `{m.get('test_loss'):.4f}`")
    st.write(f"- –¢–æ—á–Ω—ñ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç—ñ: `{m.get('test_accuracy'):.4f}`")

    # –≥—Ä–∞—Ñ—ñ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
    c1, c2 = st.columns(2)
    if m.get("loss_plot"):
        c1.image(
            base64.b64decode(m["loss_plot"]),
            caption="–ü–æ–º–∏–ª–∫–∞ –ø–æ –µ–ø–æ—Ö–∞—Ö", use_container_width=True
        )
    if m.get("accuracy_plot"):
        c2.image(
            base64.b64decode(m["accuracy_plot"]),
            caption="–¢–æ—á–Ω—ñ—Å—Ç—å –ø–æ –µ–ø–æ—Ö–∞—Ö", use_container_width=True
        )

    # –ø–æ–≤–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è
    st.subheader("–Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è")
    hist = m.get("history", {})
    if hist:
        df_hist = pd.DataFrame({
            "train_loss": hist.get("loss", []),
            "val_loss":   hist.get("val_loss", []),
            "train_acc":  hist.get("accuracy", []),
            "val_acc":    hist.get("val_accuracy", []),
        })
        st.line_chart(df_hist)

    # –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    model_path = m.get("model_path")
    if model_path and os.path.exists(model_path):
        with open(model_path, "rb") as f:
            st.download_button(
                "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—É –º–æ–¥–µ–ª—å",
                data=f,
                file_name=os.path.basename(model_path),
                mime="application/octet-stream"
            )
