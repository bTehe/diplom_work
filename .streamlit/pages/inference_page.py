# inference_page.py

import os
import base64
from datetime import datetime

import streamlit as st
import pandas as pd
import traceback

from utils.inference import infer_on_file, list_model_files
from utils.config import PROCESSED_FOLDER, MODEL_FOLDER, INFERENCE_FOLDER
import tensorflow as tf

def inference_page():
    st.title("üîç –Ü–Ω—Ñ–µ—Ä–µ–Ω—Å")

    # ‚îÄ‚îÄ –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    csv_files = [f for f in os.listdir(PROCESSED_FOLDER) if f.endswith(".csv")]
    model_files = list_model_files(MODEL_FOLDER)

    csv_choice = st.selectbox("–û–±—Ä–æ–±–ª–µ–Ω–∏–π CSV-—Ñ–∞–π–ª", [""] + csv_files)
    model_choice = st.selectbox("–§–∞–π–ª –º–æ–¥–µ–ª—ñ (.h5)", [""] + model_files)
    use_gpu = st.checkbox("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –Ω–∞ GPU", value=True)

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å"):
        if not csv_choice or not model_choice:
            st.error("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —ñ CSV-—Ñ–∞–π–ª, —ñ —Ñ–∞–π–ª –º–æ–¥–µ–ª—ñ.")
            return

        with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å‚Ä¶"):
            try:
                result = infer_on_file(
                    test_file=csv_choice,
                    processed_dir=PROCESSED_FOLDER,
                    model_path=os.path.join(MODEL_FOLDER, model_choice),
                    use_gpu=use_gpu
                )
                
                # Save results to CSV
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                results_df = pd.DataFrame({
                    'true': result['true_labels'],
                    'pred': result['predictions'],
                    'confidence': [max(p) for p in result.get('prediction_probs', [])]
                })

                metrics = result.get('metrics', {})
                for name, value in metrics.items():
                    results_df[name] = value

                results_df['model_used']   = result.get('model_used', model_choice)
                results_df['hardware']     = result.get('hardware', '‚Äî')
                results_df['inference_ts'] = timestamp

                output_file = f"{timestamp}_{os.path.splitext(csv_choice)[0]}_results.csv"
                output_path = os.path.join(INFERENCE_FOLDER, output_file)
                results_df.to_csv(output_path, index=False)
                st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {output_file}")
                
            except Exception as e:
                st.exception(e)
                tb = traceback.format_exc()
                st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å:\n```\n{tb}\n```")
                st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å: {e}")
                return

        _show_inference_results(result)


def _show_inference_results(r: dict):
    st.success("‚úÖ –Ü–Ω—Ñ–µ—Ä–µ–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    st.subheader("–î–µ—Ç–∞–ª—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –∑–≤–µ–¥–µ–Ω–Ω—è")
    st.write(f"**–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –º–æ–¥–µ–ª—å:** {r.get('model_used', '‚Äî')}")
    st.write(f"**–ê–ø–∞—Ä–∞—Ç–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è:** {r.get('hardware', '‚Äî')}")

    # –ó–±–∏—Ä–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ –≤–∏–±—ñ—Ä–∫–æ—é
    trues = r.get("true_labels", [])
    samples = len(trues)
    classes = len(set(trues))
    df_summary = pd.DataFrame({
        "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö": ["–¢–µ—Å—Ç–æ–≤–∏–π"],
        "–ó—Ä–∞–∑–∫—ñ–≤": [samples],
        "–ö–ª–∞—Å—ñ–≤": [classes]
    })
    st.table(df_summary)

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏")
    m = r.get("metrics", {})
    df_metrics = pd.DataFrame({
        "–ú–µ—Ç—Ä–∏–∫–∞": [
            "–¢–æ—á–Ω—ñ—Å—Ç—å", "Precision (macro)", "Recall (macro)", "F1-–æ—Ü—ñ–Ω–∫–∞ (macro)",
            "–í–∞–≥–æ–º–∞ F1", "Top-3 —Ç–æ—á–Ω—ñ—Å—Ç—å", "Top-5 —Ç–æ—á–Ω—ñ—Å—Ç—å",
            "Log-loss", "ROC AUC (micro)", "ROC AUC (macro)",
            "PR AUC (micro)", "PR AUC (macro)"
        ],
        "–ó–Ω–∞—á–µ–Ω–Ω—è": [
            m.get("accuracy"),
            m.get("precision"),
            m.get("recall"),
            m.get("f1"),
            m.get("weighted_f1"),
            m.get("top_3_accuracy") or "N/A",
            m.get("top_5_accuracy") or "N/A",
            m.get("log_loss"),
            m.get("roc_auc_micro") or "N/A",
            m.get("roc_auc_macro") or "N/A",
            m.get("pr_auc_micro") or "N/A",
            m.get("pr_auc_macro") or "N/A",
        ]
    })
    st.table(df_metrics)

    st.subheader("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó")
    c1, c2 = st.columns(2)
    if r.get("confusion_matrix_plot"):
        c1.image(
            base64.b64decode(r["confusion_matrix_plot"]),
            caption="–ú–∞—Ç—Ä–∏—Ü—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π",
            use_container_width=True
        )
    if r.get("roc_plot"):
        c2.image(
            base64.b64decode(r["roc_plot"]),
            caption="ROC-–∫—Ä–∏–≤—ñ",
            use_container_width=True
        )
    c3, c4 = st.columns(2)
    if r.get("pr_plot"):
        c3.image(
            base64.b64decode(r["pr_plot"]),
            caption="–ö—Ä–∏–≤—ñ —Ç–æ—á–Ω—ñ—Å—Ç—å‚Äì–≤—ñ–¥–∑–∏–≤",
            use_container_width=True
        )
    if r.get("calibration_plot"):
        c4.image(
            base64.b64decode(r["calibration_plot"]),
            caption="–ö—Ä–∏–≤–∞ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è",
            use_container_width=True
        )

    st.subheader("–ù–∞–π–ø–æ–º—ñ—Ç–Ω—ñ—à—ñ –ø–æ–º–∏–ª–∫–∏")
    preds = r.get("predictions", [])
    trues = r.get("true_labels", [])
    errors = [
        {"–Ü–Ω–¥–µ–∫—Å": i, "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –º—ñ—Ç–∫–∞": trues[i], "–ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –º—ñ—Ç–∫–∞": preds[i]}
        for i in range(len(trues)) if preds[i] != trues[i]
    ]
    if errors:
        st.table(pd.DataFrame(errors).head(10))
    else:
        st.write("–ü–æ–º–∏–ª–æ–∫ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
